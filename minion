#!/usr/bin/env perl

# minion -- a quite simple web page generator
#
# Usage: multimarkdown file.md | minion -s site.css -n nav.html > file.php
#
# Credits to mc at the domain hack.org for his program mdn that this work is
# derived from.
#
# Copyright (c) 2015-2017, Joel A. HÃ¤nel <joel@hanel.nu>
# Copyright (c) 2014, Michael Cardell Widerkrantz <mc@hack.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

################################################################################
# PRAGMAS
################################################################################

use 5.24.3;    # OpenBSD 6.2-current

use strict;
use warnings;
use utf8;

no warnings 'experimental::smartmatch';

use English '-no_match_vars';
use Getopt::Std;
use Text::CSV_XS;

################################################################################
# MAIN
################################################################################

# Use stylesheet (URL); set with -s.
my $stylesheet;

# Include navigation bar (URL); set with -n.
my $navbar;

my %options;

getopts( "n:s:", \%options );

if ( $options{'s'} ) {
    $stylesheet = $options{'s'};
}

if ( $options{'n'} ) {
    $navbar = $options{'n'};
}

my $csv = Text::CSV_XS->new(
    {   decode_utf8 => 0,
        sep_char    => ';',
    }
);

my $buffer;
my $page_has_title;
my $page_has_table;

while ( my $line = <> ) {
    $buffer .= do {
        given ($line) {
            when ( m/<h[12]\s*/     ) { title($line)  }
            when ( m/{{csv=*}}/     ) { table($line)  }
            when ( m/Last updated:/ ) { footer($line) }
            default                   { $line         }
        }
    };
}

print beginning();
print $buffer;
print end();

################################################################################
# SUBROUTINES
################################################################################

sub beginning {

    # TODO Replace with heredoc.
    my $beginning = qq^<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta name="viewport" content="initial-scale=1">
<meta name="generator" content="minion by Joel A. Nilsson">
^;

    if ($page_has_table) {
        $beginning .= qq{<script src="sorttable.js"></script>\n};
    }

    if ($stylesheet) {
        $beginning
            .= qq{<link rel="stylesheet" type="text/css" href="$stylesheet">\n};
    }

    return $beginning;
}

#-------------------------------------------------------------------------------

# TODO This subroutine needs some work.
sub title {
    my ($line) = @ARG;

    my $title;
    if (!$page_has_title) {
        $page_has_title = 1;
    
        my $headline = $line;
        chomp $headline;
    
        (my $heading = $headline) =~ s/<h[12]\sid\=\"\w+\">//xms;
        $heading =~ s/<\/h[12]>//xms;
    
        $title = qq{<title>$heading</title>\n}
               . qq{</head>\n<body>\n<div id="top">\n<header>\n};
    
        if ($navbar) {
            $title .= qq{<?php include("$navbar"); ?>\n};
        }
    
        $title .= qq{</header>\n</div>\n<main>\n$headline\n};
    }
    else {
        $title = $line;
    }

    return $title;
}

#-------------------------------------------------------------------------------

sub table {
    my ($line) = @ARG;

    $page_has_table = 1;

    my $csv_file = $line;

    $csv_file =~ s/<p>{{csv=//xms;
    $csv_file =~ s/}}<\/p>//xms;

    chomp $csv_file;

    open my $csv_data, '<:encoding(utf8)', $csv_file or die "$csv_file: $!";

    my $table
        = qq{<table class="sortable"><caption>$csv_file</caption>\n<thead>\n<tr>};

    my $is_head = 1;

    while ( my $row = $csv->getline($csv_data) ) {
        my @cells = @$row;

        if ($is_head) {
            $is_head = 0;

            for my $element (@cells) {
                $table .= "<th>$element</th>";
            }

            $table .= "</tr>\n</thead>\n<tbody>\n";
        }
        else {
            $table .= "<tr>";

            for my $element (@cells) {
                $table .= "<td>$element</td>";
            }

            $table .= "</tr>\n";
        }
    }

    $table .= "</tbody>\n</table>\n";

    close $csv_data or die "$csv_file: $!";

    return $table;
}

#-------------------------------------------------------------------------------

sub end {
    return "</main>\n</body>\n</html>\n";
}

__END__

################################################################################
# Last Changed: 2017-11-25 19:01:33 CET
