#!/bin/sh
#
# check-host -- check if one or several hosts are alive and use pushover to send
#               a notification upon a negative response
#
# Usage: check-host [-f] filename/host
#
# Copyright (c) 2015-2016, Joel A. Nilsson <joel@alikzus.se>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#

################################################################################
# PRAGMAS
################################################################################

set -u

################################################################################
# CONSTANTS
################################################################################

NAME="check-host"

################################################################################
# SUBROUTINES
################################################################################

error() {
    echo "!!! ${*}"
}

say() {
    echo "==> ${*}"
}

abort() {
    say "Aborted"
    exit 1
}

usage() {
    echo
    echo "Usage: ${NAME} [-f] filename/host" >&2
    echo
    echo "Options:"
    echo "  -f    read host(s) from the specified file"
    echo
    exit 1
}

#===============================================================================

send_msg() {
    # Pushover format: title message
    /usr/local/bin/pushover "${_HOST}" "$1"
}

no_respons() {
    if [ -f "${cache}" ]; then
        count="$(cat "${cache}")"
        if [ "${count}" -le 12 ]; then
            time=60
        elif [ "${count}" -gt 12 ] && [ "${count}" -le 18 ]; then
            time=120
        else
            time=720
        fi
        if [ "$(/usr/bin/find "${cache}" -mmin +${time})" ]; then
            count=$((count + 1))
            echo "${count}" > "${cache}"
            send_msg "$1 is still NOT responding to pings"
        fi
    else
        echo "1" > "${cache}"
        send_msg "$1 is NOT responding to pings"
    fi
}

respons() {
    if [ -f "${cache}" ]; then
        rm "${cache}"
        send_msg "$1 has started to respond to pings again"
    fi
}

check_respons() {
    cache="${_TMPDIR}/$1"

    tries=0

    while [ ${tries} -lt 60 ]; do
        /sbin/ping -c 1 -q "$1" > /dev/null
        if [ $? -eq 0 ]; then
            got_respons=1
            break
        else
            got_respons=0
        fi
        tries=$((tries + 1))
        sleep 1
    done

    if [ "${got_respons}" -eq 0 ]; then
        no_respons "$1"
    else
        respons "$1"
    fi
}

################################################################################
# MAIN
################################################################################

trap "abort" 1 2 3 13 15

_HOST=$(/bin/hostname -s)
_TMPDIR="/tmp/${NAME}"

file_is_specified=0

while getopts 'f' arg; do
    case ${arg} in
    f)  file_is_specified=1 ;;
    *)  usage ;;
    esac
done

if [ ! -d "${_TMPDIR}" ]; then
    /bin/mkdir "${_TMPDIR}"
fi

if [ "${file_is_specified}" -eq 1 ]; then
    hosts=$(cat "$2")
    
    for host in ${hosts}; do
        check_respons "${host}"
    done
else
    check_respons "$1"
fi

################################################################################
# Last Changed: 2016-08-31 17:29:01 CEST
